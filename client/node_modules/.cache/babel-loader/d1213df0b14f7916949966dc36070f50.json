{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\sr\\\\Downloads\\\\withoutnodemodules\\\\withoutnodemodules\\\\client\\\\src\\\\lib\\\\FileUploadInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext } from \"react\";\nimport { Grid, Button, TextField, LinearProgress } from \"@material-ui/core\";\nimport { CloudUpload } from \"@material-ui/icons\";\nimport Axios from \"axios\";\nimport { SetPopupContext } from \"../App\";\n\nconst FileUploadInput = props => {\n  _s();\n\n  const setPopup = useContext(SetPopupContext);\n  const {\n    uploadTo,\n    identifier,\n    handleInput\n  } = props;\n  const [file, setFile] = useState(\"\");\n  const [uploadPercentage, setUploadPercentage] = useState(0);\n  const filetype = [\"application/pdf\"];\n\n  const handleUpload = () => {\n    if (filetype.includes(file.type)) {\n      const data = new FormData();\n      data.append(\"file\", file);\n      data.append(\"upload_preset\", \"Test_post\");\n      data.append(\"cloud_name\", \"dipak1243\");\n      Axios.post(\"https://api.cloudinary.com/v1_1/dipak1243/image/upload\", data, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        onUploadProgress: progressEvent => {\n          setUploadPercentage(parseInt(Math.round(progressEvent.loaded * 100 / progressEvent.total)));\n        }\n      }).then(response => {\n        console.log(response);\n        handleInput(identifier, response.data.url);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"File uploaded successfully\"\n        });\n      }).catch(err => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error while uploading\" //   message: err.response.data\n          //     ? err.response.data.message\n          //     : err.response.statusText,\n\n        });\n      });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Please Select Only PDF\" //   message: err.response.data\n        //     ? err.response.data.message\n        //     : err.response.statusText,\n\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    direction: \"column\",\n    className: props.className,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      item: true,\n      xs: 12,\n      spacing: 0,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          component: \"label\",\n          style: {\n            width: \"100%\",\n            height: \"100%\"\n          },\n          children: [props.icon, /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            style: {\n              display: \"none\"\n            },\n            onChange: event => {\n              setUploadPercentage(0);\n              setFile(event.target.files[0]);\n            } // onChange={onChange}\n            // onChange={\n            //   (e) => {}\n            //   //   setSource({ ...source, place_img: e.target.files[0] })\n            // }\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: props.label,\n          value: file ? file.name || \"\" : \"\",\n          InputProps: {\n            readOnly: true\n          },\n          variant: \"outlined\",\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          style: {\n            width: \"100%\",\n            height: \"100%\"\n          },\n          onClick: () => handleUpload(),\n          disabled: file ? false : true,\n          children: /*#__PURE__*/_jsxDEV(CloudUpload, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), uploadPercentage !== 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      style: {\n        marginTop: \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: uploadPercentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FileUploadInput, \"DTHqfBbxBT2IQbhIUOGxHDcJuB4=\");\n\n_c = FileUploadInput;\nexport default FileUploadInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUploadInput\");","map":{"version":3,"sources":["C:/Users/sr/Downloads/withoutnodemodules/withoutnodemodules/client/src/lib/FileUploadInput.js"],"names":["useState","useContext","Grid","Button","TextField","LinearProgress","CloudUpload","Axios","SetPopupContext","FileUploadInput","props","setPopup","uploadTo","identifier","handleInput","file","setFile","uploadPercentage","setUploadPercentage","filetype","handleUpload","includes","type","data","FormData","append","post","headers","onUploadProgress","progressEvent","parseInt","Math","round","loaded","total","then","response","console","log","url","open","severity","message","catch","err","className","width","height","icon","display","event","target","files","label","name","readOnly","marginTop"],"mappings":"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","sourcesContent":["import { useState, useContext } from \"react\";\nimport { Grid, Button, TextField, LinearProgress } from \"@material-ui/core\";\nimport { CloudUpload } from \"@material-ui/icons\";\nimport Axios from \"axios\";\n\nimport { SetPopupContext } from \"../App\";\n\nconst FileUploadInput = (props) => {\n  const setPopup = useContext(SetPopupContext);\n\n  const { uploadTo, identifier, handleInput } = props;\n\n  const [file, setFile] = useState(\"\");\n  const [uploadPercentage, setUploadPercentage] = useState(0);\n  const filetype=[\"application/pdf\"]\n  const handleUpload = () => {\n    \n    if(filetype.includes(file.type)){\n      \n      const data = new FormData();\n    data.append(\"file\", file);\n    data.append(\"upload_preset\",\"Test_post\");\n    data.append(\"cloud_name\",\"dipak1243\");\n    Axios.post(\"https://api.cloudinary.com/v1_1/dipak1243/image/upload\", data, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      onUploadProgress: (progressEvent) => {\n        setUploadPercentage(\n          parseInt(\n            Math.round((progressEvent.loaded * 100) / progressEvent.total)\n          )\n        );\n      },\n    })\n      .then((response) => {\n        console.log(response)\n        handleInput(identifier, response.data.url);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"File uploaded successfully\",\n        });\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error while uploading\",\n          //   message: err.response.data\n          //     ? err.response.data.message\n          //     : err.response.statusText,\n        });\n      });\n    }else{\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Please Select Only PDF\",\n        //   message: err.response.data\n        //     ? err.response.data.message\n        //     : err.response.statusText,\n      });\n    }\n    \n  };\n\n  return (\n    <Grid container item xs={12} direction=\"column\" className={props.className}>\n      <Grid container item xs={12} spacing={0}>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            component=\"label\"\n            style={{ width: \"100%\", height: \"100%\" }}\n          >\n            {props.icon}\n            <input\n              type=\"file\"\n              style={{ display: \"none\" }}\n              onChange={(event) => {\n              \n                setUploadPercentage(0);\n                setFile(event.target.files[0]);\n              }}\n              // onChange={onChange}\n              // onChange={\n              //   (e) => {}\n              //   //   setSource({ ...source, place_img: e.target.files[0] })\n              // }\n            />\n          </Button>\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            label={props.label}\n            value={file ? file.name || \"\" : \"\"}\n            InputProps={{\n              readOnly: true,\n            }}\n            variant=\"outlined\"\n            style={{ width: \"100%\" }}\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            style={{ width: \"100%\", height: \"100%\" }}\n            onClick={() => handleUpload()}\n            disabled={file ? false : true}\n          >\n            <CloudUpload />\n          </Button>\n        </Grid>\n      </Grid>\n      {uploadPercentage !== 0 ? (\n        <Grid item xs={12} style={{ marginTop: \"10px\" }}>\n          <LinearProgress variant=\"determinate\" value={uploadPercentage} />\n        </Grid>\n      ) : null}\n    </Grid>\n  );\n};\n\nexport default FileUploadInput;"]},"metadata":{},"sourceType":"module"}